pipeline {
    agent any

    environment {
        SONAR_PROJECT_KEY = "microservices-checkoutservice"
        SONAR_PROJECT_NAME = "Checkout Service"
        SONAR_PROJECT_VERSION = "1.0"
        APP_NAME = "checkoutservice"
        RELEASE = "1.0.0"
        DOCKER_USER = "mouhib19"
        // Store credentials securely in Jenkins Credentials Store
        DOCKER_PASS = credentials('dockerhub-creds') 
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    // Verify Maven is available
                    sh 'mvn --version'
                    sh 'mvn clean compile'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                        -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                        -Dsonar.sources=. \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.sourceEncoding=UTF-8
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_USER}/${APP_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
                    sh """
                        trivy image --no-progress \
                        --exit-code 0 \
                        --severity HIGH,CRITICAL \
                        ${DOCKER_USER}/${APP_NAME}:${IMAGE_TAG} | tee trivy-scan.txt
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        docker.image("${DOCKER_USER}/${APP_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'trivy-scan.txt', allowEmptyArchive: true
            cleanWs()  // Clean workspace after build
        }
    }
}
